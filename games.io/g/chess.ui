#type: ignore

#root
    title = "Games.io - Chess"
    size = (700,700)
    bg = (35,35,50)
    resizable = False

#area
    position = (10,10)
    width = 680
    height = 680
    color = (45,45,70)
    corner_radius = 10
    layer = -2

#area
    position = (17,17)
    width = 450
    height = 450
    color = (40,40,40)
    corner_radius = 10
    layer = -1

// Chat area
#area
    position = (17,475)
    width = 450
    height = 207
    color = (40,40,40)
    corner_radius = 10
    layer = -1

// Side area (vertical)
#area
    position = (475,17)
    width = 207
    height = 666
    color = (40,40,40)
    corner_radius = 10
    layer = -1

// Chat
#text
    position = (30, 480)
    text = "Live Chat"
    size = 30
    color = (60,60,200)

#textbox:chatBox
    position = (25, 650)
    width = 435
    height = 24
    size = 20
    color = (100,100,100)
    focus_color = (75,75,75)
    hover_color = (50,50,50)
    font_color = (255,255,255)
    corner_radius = 5
    text = ""

// Username
#text
    position = (510,25)
    text = "Username"
    size = 40
    color = (60,60,200)

#textbox:username
    position = (490,58)
    width = 175
    height = 40
    size = 36
    color = (100,100,100)
    focus_color = (75,75,75)
    hover_color = (50,50,50)
    font_color = (255,255,255)
    corner_radius = 10
    text = ""

// Server id
#text
    position = (510,104)
    text = "Server ID"
    size = 40
    color = (60,60,200)

#textbox:serverId
    position = (490,136)
    width = 175
    height = 40
    size = 36
    color = (100,100,100)
    focus_color = (75,75,75)
    hover_color = (50,50,50)
    font_color = (255,255,255)
    corner_radius = 10
    text = ""

// Create or join game
#button
    position = (490,190)
    width = 175
    height = 40
    size = 36
    text = "Join Game"
    color = (50,50,50)
    hover_color = (75,75,75)
    action = 'joinGame'

#button
    position = (490,240)
    width = 175
    height = 40
    size = 35
    text = "Create Game"
    color = (50,50,50)
    hover_color = (75,75,75)
    action = 'createGame'

// Player list
#text
    position = (500,300)
    text = "Player List:"
    size = 40
    color = (60,60,200)

// Turn timer
#area
    position = (333, 480)
    width = 130
    height = 30
    color = (35,35,35)
    corner_radius = 5

#text:turnTimer
    position = (336, 485)
    text = '10:00 | 10:00'
    size = 30
    color = (200,200,200)




!script:joinGame
    global s, players
    if not inGame:
        import socket
        g.reset()
        turnTimer = [10*60, 10*60]
        username = objects['username'].text
        id = objects['serverId'].text

        s = socket.socket()
        s.connect(addr)

        s.send(f'!set_name|{username}'.encode())
        t.sleep(0.1)
        s.send(f'!join_game|{id}'.encode())

        players = s.recv(1024).decode().split('|')

        if players[0] == 'E':
            print(f'Error: {players[1]}')
        else:
            objects['username'].inactive = True
            objects['serverId'].inactive = True
            print(f'Joined game with id {id}')

            inGame = True
            team = 'b' if len(players) % 2 == 0 else 'w'
            updatePlayerlist()

            Thread(target=server,daemon=True).start()

        updateBoard()

!script:createGame
    global s, players
    if not inGame:
        from threading import Thread
        import socket
        username = objects['username'].text
        id = objects['serverId'].text

        objects['username'].inactive = True
        objects['serverId'].inactive = True

        s = socket.socket()
        s.connect(addr)

        s.send(f'!set_name|{username}'.encode())
        t.sleep(0.1)
        s.send(f'!create_game|{id}'.encode())

        print(f'Game created with id {id}')

        inGame = True
        team = 'w'
        players = [username]
        updatePlayerlist()

        Thread(target=server,daemon=True).start()


!script:initBoard
    def makeSquare(x,y,color):
        global imageGrid, areaGrid

        color = (170,170,170) if color == 1 else (30,30,30)

        a = ui.Area(
            position = (x,y),
            width = 50,
            height = 50,
            color = color,
            corner_radius = 4
        ).add(ui.root,5)
        areaGrid[x//55,y//55] = a

    startPad = 25
    tilePad = 5
    for y in range(8):
        for x in range(8):
            makeSquare(
                startPad + x * (50 + tilePad),
                startPad + y * (50 + tilePad),
                (x + y + 1) % 2
            )

!event:onLoad
    global areaGrid, server, players
    import time as t
    from Chessnut import Game
    from threading import Thread
    inGame = False

    root = ui.root

    # Chessnut Game
    g = Game()

    # Stores the actual images so we can delete them later
    imageGrid:dict[(int,int): ui.Image] = {}

    # Store the grid
    areaGrid:dict[(int,int): ui.Area] = {}

    # Stores playerlist text objects so we can delete them later
    playerList = []

    # Stores the chat message text objects so we can delete/move them later
    chatList = []

    # Stores the turn timer (in seconds)
    turnTimer = [10*60, 10*60]

    # Stores the highlighted pieces
    highlights = []

    team = 'w'

    # Chess piece values
    # --- White ---
    # 0 = pawn
    # 1 = knight
    # 2 = bishop
    # 3 = rook
    # 4 = queen
    # 5 = king
    # --- Black ---
    # 6 = pawn
    # 7 = knight
    # 8 = bishop
    # 9 = rook
    # 10 = queen
    # 11 = king

    def server():
        global g, coordsToMove, gameStarted, updatePlayerlist, s
        while True:
            msg = s.recv(1024).decode().split('|')
            if msg == ['']: continue
            print(msg)

            if msg[0] == 'JOIN':
                players.append(msg[1])
                updatePlayerlist()

            elif msg[0] == 'LEFT':
                players.remove(msg[1])
                updatePlayerlist()

            elif msg[0] == 'broadcast':
                if msg[1] == 'chat':
                    addMessage(msg[2],'|'.join(msg[3:]))

                if msg[1] == 'move':
                    pos1 = msg[2].split(',') # From
                    pos2 = msg[3].split(',') # To
                    pos1 = int(pos1[0]),int(pos1[1])
                    pos2 = int(pos2[0]),int(pos2[1])

                    promote = msg[4] if len(msg) == 5 else ''

                    try: g.apply_move(coordsToMove(pos1,pos2,promote))
                    except Exception as e:
                        print(e)
                        continue
                    else:
                        gameStarted = True

                    updateBoard()

    def pieceIndexToAssetName(index):
        return ['wp','wn','wb','wr','wq','wk','bp','bn','bb','br','bq','bk'][index]

    def assetNameToPieceIndex(name):
        return ['wp','wn','wb','wr','wq','wk','bp','bn','bb','br','bq','bk'].index(name)

    def coordsToMove(pos1,pos2,promote=''):
        from string import ascii_lowercase as l
        return f'{l[pos1[0]]}{8-pos1[1]}{l[pos2[0]]}{8-pos2[1]}{promote}'

    def convertNotation(text:str):
        global team
        if text.strip() == '': return None
        out = ''
        if text.lower() == text:
            out += 'b'
        else:
            out += 'w'
        out += text.lower()
        return out

    def setPiece(x,y,piece):
        global pieceIndexToAssetName, addr, team, grid, imageGrid
        if isinstance(piece,int): piece = pieceIndexToAssetName(piece)

        if team == 'b':
            y = 7 - y
            x = 7 - x

        root = ui.root

        if not os.path.exists(f'temp/{piece}.png'):
            img = get_file(addr,f'assets/chess/{piece}.png')
            os.makedirs(f'temp',exist_ok=True)
            with open(f'temp/{piece}.png','wb') as f: f.write(img)

        img = ui.Image(
            position = (
                25 + x * (50 + 5),
                25 + y * (50 + 5)
            ),
            width = 50,
            height = 50,
            image_path = f'temp/{piece}.png'
        ).add(root,10)
        imageGrid[x,y] = img
        grid[x,y] = piece

    def delImg(x,y):
        root.remove(imageGrid[x,y])
        imageGrid.pop((x,y))

    def updateBoard():
        global imageGrid, grid, setPiece, delImg, convertNotation, assetNameToPieceIndex
        for (x,y),i in imageGrid.copy().items():
            root.remove(i)
            imageGrid.pop((x,y))

        grid = {}

        for i in range(8*8):
            piece = convertNotation(g.board.get_piece(i))
            if piece: grid[i%8,i//8] = piece

        for (x,y),piece in grid.copy().items():
            setPiece(x,y,piece)

    updateBoard()

    def updatePlayerlist():
        global playerList, root, players, inGame

        for i in playerList:
            try: root.remove(i)
            except: ...

        playerList = []

        for i,name in enumerate(players):
            a = ui.Text(
                position = (500, 345 + i * 40),
                size = 35,
                color = (60,60,200),
                text = name
            ).add(root,10)
            playerList.append(a)

    def addMessage(user:str,msg:str):
        global chatList
        if len(chatList) > 6:
            root.remove(chatList.pop(0))

        for i in chatList:
            i.setPos(i.x, i.y - (i.size-4))

        a = ui.Text(
            position = (30, 630),
            size = 25,
            color = (255,255,255),
            text = f'{user}: {msg}'
        ).add(root,10)

        chatList.append(a)

    def action(text:str):
        if not inGame:
            objects['chatBox'].text = ''
            return

        if '\r' in text:
            objects['chatBox'].text = ''
            text = text.replace('\r','')
            s.send(f'!broadcast|chat|{username}|{text}'.encode())
            addMessage(username,text)

    def updateTurnTimer():
        global turnTimer, gameStarted
        if not gameStarted: return
        if g.state.player == team:
            turnTimer[0] -= ui.dt / 1000
        else:
            turnTimer[1] -= ui.dt / 1000

        turnTimer = [max(0,turnTimer[0]), max(0,turnTimer[1])]

        a,b = turnTimer
        objects['turnTimer'].text = f'{str(a//60).split('.')[0]:0>2}:{round(a%60):0>2} | {str(b//60).split('.')[0]:0>2}:{round(b%60):0>2}'

    selected = None
    selectedPos = None,None
    cantMove = False
    lastMoveTime = None
    gameStarted = False

    def event(event):
        global selected, selectedPos, team, areaGrid, promotionMenu, cantMove, t, gameStarted, highlights, size

        if g.status == g.CHECKMATE:
            loser = g.state.player
            cantMove = True
            text = 'You Lost! L' if loser == team else 'You Won! W'
            print(text)

            ui.Text(
                position = (100, 100),
                size = 50,
                text = text
            ).add(root,1000)

            ui.Button(
                position = (100,150),
                action = exit,
                text = 'Exit',
                size = 50,
                width = 200,
                height = 50
            ).add(ui.root,1000)

        if event.type != ui.pygame.MOUSEBUTTONDOWN: return

        if cantMove: return

        if event.dict['button'] != 1: return

        mx,my = event.dict['pos']

        x, y = (25 + mx) // 55 - 1, (25 + my) // 55 - 1

        if x not in range(0, 8) or y not in range(0, 8):
            return

        piece = grid.get((x,y),False)

        if (x,y) in highlights:
            for (x,y),i in areaGrid.items():
                i.color = (170,170,170) if (x + y + 1) % 2 else (30,30,30)
            highlights = []

        else:
            areaGrid[(x,y)].color = (60,60,200)
            highlights.append((x,y))

        if team == 'b':
            y = 7 - y
            x = 7 - x

        if selectedPos and selectedPos == (x,y): return

        if (not inGame and not selected) or (inGame and not selected and piece and piece.startswith(team)):
            selected = piece
            selectedPos = x,y

        elif selected and len(highlights) <= 2:

            move = coordsToMove(selectedPos,(x,y))

            # Try to move
            try: g.apply_move(move)
            except Exception as e: # Illegal move
                print(e)

                # Try move again but promote to queen
                fen = g.get_fen()
                try:
                    g.apply_move(move+'q')
                except Exception as e:
                    # Could not promote, load previous state and continue as if nothing happened
                    ...
                else:
                    # Rollback the board
                    g.set_fen(fen)

                    cantMove = True
                    print('Can promote!')
                    # Could promote! (yay) ask the user to select which piece to promote to
                    # Aka draw the thing
                    promotionMenu = []

                    for i,t in enumerate(['q','r','b','n']):
                        p = team + t

                        comp = ui.Image(
                            position = (25 + mx + i * 55, my),
                            width = 55,
                            height = 55,
                            image_path = f'temp/{p}.png'
                        ).add(root,16)
                        promotionMenu.append(comp)

                    def a(promote):
                        global g, inGame, s, areaGrid, updateBoard, cantMove, promotionMenu, x, y, selectedPos, highlights
                        cantMove = False
                        try: g.apply_move(move+promote)
                        except Exception as e: print(f'Failed to promote [{e}]')

                        if inGame:
                            a = 1 if team == 'w' else 6
                            s.send(f'!broadcast|move|{selectedPos[0]},{a}|{7-x},{7-y}|{promote}'.encode())

                        for (x,y),i in areaGrid.items():
                            i.color = (170,170,170) if (x + y + 1) % 2 else (30,30,30)
                        highlights = []

                        for i in promotionMenu:
                            try: root.remove(i)
                            except: ...

                        updateBoard()

                    # Queen
                    comp = ui.Button(
                        position = (25 + mx + 0 * 55, my),
                        width = 55,
                        height = 55,
                        corner_radius = 0,
                        color = (60,60,200),
                        text = '',
                        size = 0,
                        action = lambda: a('q')
                    ).add(root,15)
                    promotionMenu.append(comp)

                    # Rook
                    comp = ui.Button(
                        position = (25 + mx + 1 * 55, my),
                        width = 55,
                        height = 55,
                        corner_radius = 0,
                        color = (60,60,200),
                        text = '',
                        size = 0,
                        action = lambda: a('r')
                    ).add(root,15)
                    promotionMenu.append(comp)

                    # Bishop
                    comp = ui.Button(
                        position = (25 + mx + 2 * 55, my),
                        width = 55,
                        height = 55,
                        corner_radius = 0,
                        color = (60,60,200),
                        text = '',
                        size = 0,
                        action = lambda: a('b')
                    ).add(root,15)
                    promotionMenu.append(comp)

                    # Knight
                    comp = ui.Button(
                        position = (25 + mx + 3 * 55, my),
                        width = 55,
                        height = 55,
                        corner_radius = 0,
                        color = (60,60,200),
                        text = '',
                        size = 0,
                        action = lambda: a('n')
                    ).add(root,15)
                    promotionMenu.append(comp)

                g.set_fen(fen)
                selected = piece
                selectedPos = x,y
                return

            else:
                gameStarted = True

            if inGame:
                s.send(f'!broadcast|move|{selectedPos[0]},{selectedPos[1]}|{x},{y}'.encode())

            selected = None
            selectedPos = None

            for (x,y),i in areaGrid.items():
                i.color = (170,170,170) if (x + y + 1) % 2 else (30,30,30)
            highlights = []

        updateBoard()

    def frame():
        global updateTurnTimer
        updateTurnTimer()

    root.addEventListener(event)
    root.addFrameListener(frame)

    objects['chatBox'].action = action

    runScript('initBoard')

!event:onUnload
    if inGame:
        s.send(b'!quit')

    for i in imageGrid:
        root.remove(i)
    for i in areaGrid:
        root.remove(i)

    print('Unloaded!')
